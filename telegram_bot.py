import telebot
import os
from dotenv import load_dotenv
from trading_bot import get_historical_data, calculate_signals, place_order, get_wallet_balance
import time
from telebot import types

load_dotenv()

bot = telebot.TeleBot(os.getenv("TELEGRAM_TOKEN"))

trading_state = {
    'last_action': None,
    'consecutive_trades': 0,
    'current_symbol': None
}

available_symbols = ["SUIUSDT", "BTCUSDT", "ETHUSDT", "XRPUSDT", "LTCUSDT", "ADAUSDT"]


@bot.message_handler(commands=['start'])
def start_command(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                          "/clear - —Å–±—Ä–æ—Å–∏—Ç—å —á–∞—Ç\n"
                          "/set_symbol - –≤—ã–±—Ä–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É\n"
                          "/add_symbol - –¥–æ–±–∞–≤–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É\n"
                          "/balance - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
                          "/price - —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã\n"
                          "/start_trading - –Ω–∞—á–∞—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é\n"
                          "/stop_trading - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é\n")


@bot.message_handler(commands=['set_symbol'])
def set_crypto_command(message):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    for symbol in available_symbols:
        markup.add(symbol)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:", reply_markup=markup)
    bot.register_next_step_handler(message, process_symbol_selection)


def process_crypto_selection(message):
    selected_symbol = message.text.upper()
    if selected_symbol in available_symbols:
        trading_state['current_symbol'] = selected_symbol
        bot.send_message(message.chat.id, f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞: {selected_symbol}")
    else:
        bot.send_message(message.chat.id, "‚ùå –≠—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑: " + ", ".join(available_symbols))


@bot.message_handler(commands=['clear'])
def clear_command(message):
    chat_id = message.chat.id
    message_id = message.message_id

    for i in range(message_id, 0, -1):
        try:
            bot.delete_message(chat_id, i)
        except:
            continue


@bot.message_handler(commands=['balance'])
def balance_command(message):
    balance = get_wallet_balance()
    if balance:
        available = balance['result']['list'][0]['totalAvailableBalance']
        total = balance['result']['list'][0]['totalWalletBalance']
        bot.send_message(message.chat.id, f"üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞:\n"
                              f"–î–æ—Å—Ç—É–ø–Ω–æ USDT: {available}\n"
                              f"–í—Å–µ–≥–æ USDT: {total}")
    else:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞")


@bot.message_handler(commands=['price'])
def price_command(message):
    symbol = trading_state.get('current_symbol', "SUIUSDT")
    try:
        df = get_historical_data(symbol, "15")
        current_price = float(df['close'].iloc[0])
        bot.send_message(message.chat.id, f"üíπ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {symbol}: {current_price} USDT")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")


@bot.message_handler(commands=['add_symbol'])
def add_crypto_command(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC):")
    bot.register_next_step_handler(message, process_new_symbol)


def process_new_crypto(message):
    new_symbol = message.text.upper() + "USDT"
    if new_symbol not in available_symbols:
        available_symbols.append(new_symbol)
        bot.send_message(message.chat.id, f"‚úÖ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ {new_symbol} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö.")
    else:
        bot.send_message(message.chat.id, "‚ùå –≠—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö.")


def trading_bot(message, symbol=None, interval="15", qty=0.1):
    if symbol is None:
        symbol = trading_state.get('current_symbol', "SUIUSDT")
    while True:
        try:
            df = get_historical_data(symbol, interval)
            df = calculate_signals(df)

            current_price = float(df['close'].iloc[0])
            last_sma20 = df['SMA20'].iloc[-1]
            last_sma50 = df['SMA50'].iloc[-1]
            current_rsi = df['RSI'].iloc[-1]
            volatility = df['volatility'].iloc[-1]

            min_qty = 0.1
            if qty < min_qty:
                qty = min_qty

            status_message = (
                f"üìä –°—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è {symbol}:\n"
                f"–¶–µ–Ω–∞: {current_price} USDT\n"
                f"RSI: {current_rsi:.2f}\n"
                f"–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {volatility:.2f}"
            )
            bot.send_message(message.chat.id, status_message)

            should_buy = (
                    last_sma20 > last_sma50 and
                    current_rsi < 70 and
                    trading_state['consecutive_trades'] < 3 and
                    trading_state['last_action'] != "Buy"
            )

            should_sell = (
                    last_sma20 < last_sma50 and
                    current_rsi > 30 and
                    trading_state['consecutive_trades'] < 3 and
                    trading_state['last_action'] != "Sell"
            )

            if should_buy:
                if place_order(symbol, "Buy", qty):
                    trading_state['last_action'] = "Buy"
                    trading_state['consecutive_trades'] += 1
                    bot.send_message(message.chat.id, "üü¢ –°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É!")
            elif should_sell:
                if place_order(symbol, "Sell", qty):
                    trading_state['last_action'] = "Sell"
                    trading_state['consecutive_trades'] += 1
                    bot.send_message(message.chat.id, "üî¥ –°–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É!")
            else:
                trading_state['consecutive_trades'] = 0

            time.sleep(60)

        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")
            time.sleep(60)


@bot.message_handler(commands=['start_trading'])
def start_trading_command(message):
    bot.send_message(message.chat.id, "‚ñ∂Ô∏è –¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞")
    trading_bot(message)


@bot.message_handler(commands=['stop_trading'])
def stop_trading_command(message):
    bot.send_message(message.chat.id, "‚èπ –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")


def main():
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")


if __name__ == "__main__":
    main()